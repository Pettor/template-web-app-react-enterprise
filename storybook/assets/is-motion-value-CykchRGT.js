const l=(s,r,n)=>n>r?r:n<s?s:n;function m(s){return typeof s=="object"&&s!==null}const f=s=>r=>typeof r=="string"&&r.startsWith(s),T=f("--"),h=f("var(--"),y=s=>h(s)?u.test(s.split("/*")[0].trim()):!1,u=/var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu,d={test:s=>typeof s=="number",parse:parseFloat,transform:s=>s},c={...d,transform:s=>l(0,1,s)},o={...d,default:1},a=s=>({test:r=>typeof r=="string"&&r.endsWith(s)&&r.split(" ").length===1,parse:parseFloat,transform:r=>`${r}${s}`}),e=a("deg"),i=a("%"),t=a("px"),w=a("vh"),R=a("vw"),p={...i,parse:s=>i.parse(s)/100,transform:s=>i.transform(s*100)},b=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],W=new Set(b),g={...d,transform:Math.round},k={rotate:e,rotateX:e,rotateY:e,rotateZ:e,scale:o,scaleX:o,scaleY:o,scaleZ:o,skew:e,skewX:e,skewY:e,distance:t,translateX:t,translateY:t,translateZ:t,x:t,y:t,z:t,perspective:t,transformPerspective:t,opacity:c,originX:p,originY:p,originZ:t},X={borderWidth:t,borderTopWidth:t,borderRightWidth:t,borderBottomWidth:t,borderLeftWidth:t,borderRadius:t,radius:t,borderTopLeftRadius:t,borderTopRightRadius:t,borderBottomRightRadius:t,borderBottomLeftRadius:t,width:t,maxWidth:t,height:t,maxHeight:t,top:t,right:t,bottom:t,left:t,padding:t,paddingTop:t,paddingRight:t,paddingBottom:t,paddingLeft:t,margin:t,marginTop:t,marginRight:t,marginBottom:t,marginLeft:t,backgroundPositionX:t,backgroundPositionY:t,...k,zIndex:g,fillOpacity:c,strokeOpacity:c,numOctaves:g},Y=(s,r)=>r&&typeof s=="number"?r.transform(s):s;function V(s){return m(s)&&"offsetHeight"in s}const x=s=>!!(s&&s.getVelocity);export{T as a,V as b,b as c,d,c as e,l as f,Y as g,i as h,x as i,y as j,e as k,w as l,m,X as n,k as o,t as p,p as q,o as s,W as t,R as v};
