/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as SplatRouteImport } from './routes/$'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as PublicSignUpRouteImport } from './routes/_public/sign-up'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PublicForgotPasswordRouteImport } from './routes/_public/forgot-password'
import { Route as PublicAboutRouteImport } from './routes/_public/about'
import { Route as AuthenticatedVersionRouteImport } from './routes/_authenticated/version'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const PublicSignUpRoute = PublicSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PublicForgotPasswordRoute = PublicForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAboutRoute = PublicAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)
const AuthenticatedVersionRoute = AuthenticatedVersionRouteImport.update({
  id: '/version',
  path: '/version',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '/version': typeof AuthenticatedVersionRoute
  '/about': typeof PublicAboutRoute
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/sign-up': typeof PublicSignUpRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '/version': typeof AuthenticatedVersionRoute
  '/about': typeof PublicAboutRoute
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/sign-up': typeof PublicSignUpRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/$': typeof SplatRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authenticated/version': typeof AuthenticatedVersionRoute
  '/_public/about': typeof PublicAboutRoute
  '/_public/forgot-password': typeof PublicForgotPasswordRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/sign-up': typeof PublicSignUpRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$'
    | '/version'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/sign-up'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$'
    | '/version'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/sign-up'
    | '/'
  id:
    | '__root__'
    | '/$'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/version'
    | '/_public/about'
    | '/_public/forgot-password'
    | '/_public/login'
    | '/_public/sign-up'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_public/sign-up': {
      id: '/_public/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof PublicSignUpRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/forgot-password': {
      id: '/_public/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicForgotPasswordRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authenticated/version': {
      id: '/_authenticated/version'
      path: '/version'
      fullPath: '/version'
      preLoaderRoute: typeof AuthenticatedVersionRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedVersionRoute: typeof AuthenticatedVersionRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedVersionRoute: AuthenticatedVersionRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicAboutRoute: typeof PublicAboutRoute
  PublicForgotPasswordRoute: typeof PublicForgotPasswordRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicSignUpRoute: typeof PublicSignUpRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutRoute: PublicAboutRoute,
  PublicForgotPasswordRoute: PublicForgotPasswordRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicSignUpRoute: PublicSignUpRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
